\section{Object Algebras Framework}

Writing generic queries and transformations with monoids and generic visitable interfaces can help users write tree structure traversal code with more extensibility and flexibility. However, writing the generic query and transformation interfaces is still painful experience by itself. It will be even better if these boilerplate code can be generated automatically. To address this problem, we provide an \emph{Object Algebra Framework}, which utilizes \emph{Java Annotation} to generate generic query and transformation interfaces based on the \emph{Object Algebra Interface}, as illustrated below: 
\begin{lstlisting}[numbers=none] 
@Algebra
public interface ExpAlg<Exp> {
	Exp Var(String s);
	Exp Lit(int i);
	Exp Add(Exp e1, Exp e2);
}
\end{lstlisting}

With the annotation "$@$Algebra", the framework will generate the boilerplate codes for us automatically. As for our ExpAlg example, the following directory structure will be generated by the library. 
\dirtree{%
 .1 src/.
 .2 generic/.
 .3 G\_ExpAlg\_Exp.
 .2 query/.
 .3 ExpAlgQuery.
 .2 transform/.
 .3 ExpAlgTransform.
}

Furthermore, the monoid interface is also included in the Object Algebras Framework

Hence when programming with query, one only needs to focus on the interesting case, for instance, the return free variable names, and the specific monoid needed, which in Free Variables case will be a String List monoid. While programming with transformation will be implementing interesting cases by inheriting from the AlgNameTransform interface with \emph{generic visitable interfaces}. 

