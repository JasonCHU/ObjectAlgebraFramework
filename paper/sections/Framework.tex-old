\section{Object Algebras Framework}

Writing generic queries and transformations with monoids and generic visitable interfaces can help users write tree structure traversal code with more extensibility and flexibility. However, writing the generic query and transformation interfaces is still painful experience by itself. It will be even better if these boilerplate code can be generated automatically. If we pay more attention to our generic query and transformation interfaces, without much difficulty we can find that the query and transform code structures for all \emph{Object Algebra Interfaces} should be quite similar. Therefore we can make this code generation process automatic. 

To address this problem, we provide an \emph{Object Algebra Framework}, which utilizes \emph{Java Annotation} to generate generic query and transformation interfaces based on the \emph{Object Algebra Interface}. as illustrated below: 
\begin{lstlisting}[numbers=none] 
@Algebra
public interface ExpAlg<Exp> {
	Exp Var(String s);
	Exp Lit(int i);
	Exp Add(Exp e1, Exp e2);
}
\end{lstlisting}

With the annotation "$@$Algebra", the framework will generate the boilerplate codes for us automatically. As for our ExpAlg example, the following directory structure will be generated by the library. 
\dirtree{%
 .1 src/.
 .2 generic/.
 .3 G\_ExpAlg\_Exp.
 .2 query/.
 .3 ExpAlgQuery.
 .2 transform/.
 .3 ExpAlgTransform.
}

Here the automatically generated ExpAlgQuery, ExpAlgTransform and G\_ExpAlg\_Exp are exactly the same code as we discussed in Section~\ref{sec:queries} and Section~\ref{sec:transformations}. Furthermore, the monoid interface is also included in the \emph{Object Algebra Framework}.

Hence when programming with query, the programmer can skip the intermediate steps such as constructing generic queries and transformations as we discussed in Section~\ref{sec:queries} abd Section~\ref{sec:transformations}, but only focus on rewriting the interesting case. For instance, in our ExpAlg example, to implement FreeVars algebra, we can simply override the Exp Var(String s) method of ExpAlgQuery class to return variable name, and provide the specific monoid needed, which in this case will be a String List monoid. While the SubstVars algebra can be realized by overriding the Exp Var(String s) method of ExpAlgTransform interface, which substitutes variable names as specified. 
