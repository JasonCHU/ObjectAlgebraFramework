\section{Queries}\label{sec:queries}

As a specific type of object algebras, queries allow users to define
new operations handling a user-defined data structure\bruno{This
  definition of queries is just too broad. A query is an operation
  that traverses a structure and computes some aggregate value. Please
look at papers like Syb to see how they describe queries and transformations}. A \textit{query
  algebra} is a class implementing an object algebra interface by a
top-down traversal throughout the hierarchy. It is something
supporting the program to gather information from the substructures of
a data type recursively, and make a response at the root node to the
query.\bruno{Haoyuan: please stop using ``$\backslash\backslash$" after every paragraph!
A normal paragraph is created by having an empty line, not by using
``$\backslash\backslash$". The ``$\backslash\backslash$" command is only for forcing a new line.}

\subsection{FreeVars: a simple query algebra}\label{subsec:freevars}

An example is shown here to discuss about query algebras in a clearer
way. The object algebra interface is related to an expression, where
it can be treated as a numeric literal, a variable or the addition of
two expressions. Specifically, the structure is defined as follows:

\begin{figure}[tb]
\lstinputlisting[linerange=8-11]{../ObjectAlgebras/src/example_SybAlg/FloatQuery.java} % APPLY:linerange=QUERY_WITH_OAFRAMEWORK
\vspace{-.1in}
\caption{Query Salary Class with Object Algebra Framework}
\label{query_with_oaframework}
\end{figure}
\bruno{Don't copy the code! Use the code from the
  repository directly via the ruby script! The same applies to the
  other pieces of code in the rest of the paper.}

Based on the interface above, a query might be raised on collecting
all the names of free variables defined in an expression. More
precisely, an array of strings would be used to store the names of
those variables. In that case, a $Var(s)$ would simply return an
one-element array of $s$, and a $Lit(i)$ corresponds to an empty set,
whereas two arrays would be merged into one if we are combining two
expressions with the $Add()$ method.

Generally speaking, it is natural to deal with the traversal in an algebra-based approach like this:

\begin{lstlisting}[numbers=none]
public interface FreeVarsExpAlg extends ExpAlg<String[]> {
    default String[] Var(String s) {
        return new String[]{s};
    }
    default String[] Lit(int i) {
        return new String[]{};
    }
    default String[] Add(String[] e1, String[] e2) {
        int e1len = e1.length;
        int e2len = e2.length;
        String[] res = new String[e1len+e2len];
        System.arraycopy(e1, 0, res, 0, e1len);
        System.arraycopy(e2, 0, res, e1len, e2len);
        return res;
    }
}
\end{lstlisting}\bruno{put code in a figure, add a caption and refer
  to the figure in the text.}

Information on our query is collected by traversal and passed on to a
higher-level structure. Nonetheless, a programmer has to write a lot
of boring code handling the traversals, and it could be even worse for
a more complicated data structure. Moreover, it is a query-based
approach: you still have to write a bunch of similar stuff with a
different query raised, for instance, a pretty printer.

\subsection{Generic query algebra with a monoid}\label{subsec:genericquery}

Queries are so similar actually: a user has to indicate the rules in
which the program may address cases on primitive types and ``append''
the information. With these two issues, everything becomes simple in
the traversal. Hence we introduce the concept of monoid and generic
traversal here in our query algebras.

\begin{lstlisting}[numbers=none]
public interface Monoid<R> {
    R join(R x, R y);
    R empty();
    default R fold(List<R> lr){
    	R res = empty();
    	for (R r: lr){
    		res = join(res, r);
    	}
    	return res;
    }
}
\end{lstlisting}

The interface of a monoid is defined above. Intuitively, the join()
method implies how we gather the information from substructures during
merging, and the empty() is just an indicator of ``no
information''. Hence now we are able to write a ``generic traversal''
manually based on monoids as follows:\bruno{As you can see, nothing
  follows! Please refer to the figure instead and briefly explain the
  code in the figure.}

\begin{figure}[!htbp]
\lstinputlisting[linerange=4-27]{../ObjectAlgebras/src/expDemo3/QueryExpAlg.java} % APPLY:linerange=GENERIC_QUERY
\vspace{-.1in}
\caption{Generic Query by hand with Monoid}
\end{figure}

And now we find everything goes in an easier way: we don't care about what kind of query it is any more during the traversal. Despite whether it asks for all the names of free variables or a printer showing the hierarchy of an expression, all we need to do is to traverse a monoid to the generic traversal class, and the monoid is exactly constructed by implementing the previous interface. This is the progress, once we prepare such a template dealing with the traversal, all query algebras can be addressed in a more concise way, which is called the \textit{generic query algebra}.

\subsection{Solving freeVars with generic query algebra}\label{subsec:solvingfreevars}

As an alternative way to handle the freeVars query, the query algebra is going to be a subclass of QueryExpAlg, the generic algebra, with generic type to be String[]. To use the generic traversal code, a monoid is defined as follows:

\begin{lstlisting}[numbers=none]
public class FreeVarsMonoid implements Monoid<String[]> {
    public String[] empty() {
        return new String[]{};
    }
    public String[] join(String[] e1, String[] e2) {
        int e1len = e1.length;
        int e2len = e2.length;
        String[] res = new String[e1len+e2len];
        System.arraycopy(e1, 0, res, 0, e1len);
        System.arraycopy(e2, 0, res, e1len, e2len);
        return res;
    }
}
\end{lstlisting}\bruno{Is an array the best structure to use here?
  Wouldn't a vector or list be better? The simpler the code is, the better.}

But the result for an expression can only be a null array based on the monoid. Thus in the freeVars query, furthermore, we expect the variables to store their names into an array, and by using the monoid, the query algebra will be like:

\begin{lstlisting}[numbers=none]
public class FreeVarsExpAlg extends QueryExpAlg<String[]> {
    public FreeVarsExpAlg(Monoid<String[]> m) {super(m);}
    public String[] Var(String s) {return new String[]{s};}
}
\end{lstlisting}

When the class FreeVarsQueryExpAlg is used, an object of the FreeVarsMonoid should be created and traversed to the constructor. As we can see, it is needless for a user to address the traversals in a data structure. Nothing but a monoid is required together with a few methods being overwritten. And furthermore, a monoid can usually be shared among query algebras with the same data type.




% Showing the code using monoids and generic traversal.

\begin{comment}
How to write generic queries by hand

Introduce Monoid
\begin{lstlisting}[numbers=none]
public interface Monoid<R> {
    R join(R x, R y);
    R empty();
    default R fold(List<R> lr){
    	R res = empty();
    	for (R r: lr){
    		res = join(res, r);
    	}
    	return res;
    }
}
\end{lstlisting}\bruno{Don't copy the code into this file! Please refer to the
  code in the implementation directly using the ruby script.}

Free Variables Monoid
\begin{figure}[tb]
\lstinputlisting[linerange=4-18]{../ObjectAlgebras/src/expDemo3/FreeVarsMonoid.java} % APPLY:linerange=FREEVARS_MONOID
\vspace{-.1in}
\caption{Free Variables Monoid}
\end{figure}


Generic Query by hand with Monoid

Free Vars Query
\begin{figure}[tb]
\lstinputlisting[linerange=4-8]{../ObjectAlgebras/src/expDemo3/FreeVarsQueryExpAlg.java} % APPLY:linerange=FREEVARS_QUERY
\vspace{-.1in}
\caption{Free Vars Query}
\end{figure}
\end{comment}
