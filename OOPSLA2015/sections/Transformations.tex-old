\section{Transformations}\label{sec:transformations}
\label{retroimp}

Queries are a way to extract information from a data structure.
Transformations, on the other hand, allow data structures to be
transformed into new structures. Just as with queries, we can distinguish code that deals with
traversing the data structure from code that actually transforms the
structure. In this section we show how to avoid most traversal
boilerplate code in the context of transformations using \name.


\subsection{Boilerplate Transformations}\label{subsec:substvars}

A simple example of a transformation algebra, using the Object
Algebra interface \lstinline{ExpAlg}, is substituting expressions for
variables. A manual implementation based on Object Algebras is shown
in Figure~\ref{substvars_without_id}.

\begin{figure}[t]
\nocaptionrule
\lstinputlisting[linerange=4-14]{../ObjectAlgebras/src/expDemo2/SubstVar.java} % APPLY:linerange=SUBSTVARS_WITHOUT_ID
\caption{A normal algebra-based implementation of variable substitution.}
\label{substvars_without_id}
\end{figure}

The expression to be substituted, and the variable to substitute for
are provided by the methods \lstinline{e()} and \lstinline{x()}
respectively. \lstinline{expAlg()} is an instance of
\lstinline{ExpAlg} on which the transformation is based. Since Object
Algebras are factories, the transformation is executed immediately
during construction of tree structures. For instance, calling \lstinline{Var("x")} on a
\lstinline{SubstVar} object with \lstinline{x()} returning
\lstinline{"x"} immediately returns the result of \lstinline{e()}
(the original variable expression is never created). In the other
cases, the original structure is recreated in the algebra
\lstinline{expAlg()}.

\lstinputlisting[linerange=16-25]{../ObjectAlgebras/src/expDemo2/ExpTest.java} % APPLY:linerange=SUBSTVAR_CLIENT


Again we observe the problem of traversal-only boilerplate code: the
\lstinline{Lit} and \lstinline{Add} methods simply delegate to the
base algebra \lstinline{expAlg()}.

\subsection{Generic Traversal Code}

\begin{figure}[t]
\nocaptionrule
\lstinputlisting[linerange=4-13]{../ObjectAlgebras/src/expDemo3/ExpAlgTransform.java} % APPLY:linerange=GENERIC_TRANSFORM
\caption{Traversal-only base interface for implementing transformations of expressions.}
\label{generic_transform}
\end{figure}

The boilerplate code in transformations can be avoided by creating a
super-interface containing default methods performing the traversal
(shown in Figure~\ref{generic_transform}). A concrete transformation can
then selectively override the cases of interest. Variable substitution
can now be implemented as follows:

\lstinputlisting[linerange=4-10]{../ObjectAlgebras/src/expDemo3/SubstVar.java} % APPLY:linerange=SUBSTVARS_WITH_ID

\noindent In
this case, only the method \lstinline{Var()} is overridden.
To execute substitution, \lstinline{SubstVar} should be subclassed
with implementations for
\lstinline{x()}, \lstinline{e()}, and \lstinline{expAlg()}. The base
algebra \lstinline{expAlg()} could for instance be \hl{an algebra for collecting free
variables (just \lstinline{FreeVars} in Section~\ref{sec:queries}),
or an algebra for pretty printing the expression with the substitution applied.}

\hl{Here we show an example of invoking \lstinline{SubstVar}. The base algebra is \lstinline{FreeVars} in Section~\ref{sec:queries},
which collects all the free variables as a set of strings. One can directly create an instance of \lstinline{SubstVar} as follows:}

\lstinputlisting[linerange=28-34]{../ObjectAlgebras/src/expDemo3/ExpTest.java} % APPLY:linerange=CLIENTCODE_SUBSTVAR

\noindent \hl{The transformation substitutes all variables ``x'' with ``z''. Such an instance \lstinline{substVar} can now be passed to a structure of \lstinline{ExpAlg}, which helps to collect the free variables in the expression, before which the transformation is applied. A set of strings is returned
as the result.}

Note that this allows pipelining of transformations: there is no reason
\lstinline{expAlg()} cannot return yet another transformation
algebra,---we elaborate on composing transformations this way in Section~\ref{SECT:chaining}.

\begin{comment}
\haoyuan{Begin: client code.}

Here we also give the client code. With the same expression \lstinline{x + (y + 2)}, a \lstinline{SubstVar} object is created. The base algebra \lstinline{expAlg()} here is implemented with an instance of \lstinline{FreeVars}, and we also override \lstinline{x()} and \lstinline{e()} aiming to substitute another variable \lstinline{"z"} for \lstinline{"x"}. The code is as follows, where the result of execution becomes \lstinline{[y, z]}.

\lstinputlisting[linerange=28-34]{../ObjectAlgebras/src/expDemo3/ExpTest.java} % APPLY:linerange=CLIENTCODE_SUBSTVAR

\haoyuan{End: client code.}
\end{comment}


Just like in the case of queries, the traversal code in \lstinline{ExpAlgTransform}
is entirely mechanical and can be automatically generated by \Name.
%Annotating algebra interfaces, such as \lstinline{ExpAlg}, with the
%annotation \lstinline{@Algebra}, triggers automatic generation of
%generic transformation interfaces.
Figure~\ref{trafoTemplate} shows
the general template for the generated code. Here
\lstinline{Alg}$_T$ extends \lstinline{Alg} with the same type parameters and
the base algebra \lstinline{alg()} is declared inside.

\begin{figure}[t]
\nocaptionrule
\begin{lstlisting}[mathescape=true]
interface Alg$_T$<X$_1$,$...$,X$_n$> extends Alg<X$_1$,$...$,X$_n$> {
  Alg<X$_1$, ..., X$_n$> alg();

  default X$_i$ f$_j$(X$^1_p$ p$_1$, $...$, X$^k_p$ p$_k$) {
    return alg().f$_j$(p$_1$, $...$, p$_k$);
  }
  $...$
}
\end{lstlisting}
\caption{Generic template for generating boilerplate of transformations.}
\label{trafoTemplate}
\end{figure}


%Another important characteristic is that we can apply several transformations to the data structure before a query. This pattern is called the \textit{transformation pipeline}. Since the transformation algebra \lstinline{ExpAlgTransform<Exp>} is a sub-interface of \lstinline{ExpAlg<Exp>}, it creates any instance with the same type as the \lstinline{expAlg()} inside. Therefore a programmer can define a number of transformation algebras, and compose them in sequence, like a nested structure. At the meantime, a query algebra is passed to the innermost \lstinline{expAlg()}. In that case, the query is traversed recursively throughout the pipeline and eventually derives a certain composite transformation algebra.


%The \lstinline{SubstVarsExpAlg} is still generic, yet something like a pretty printer can be passed to the \lstinline{expAlg()} inside as a query, to display the results. Hence at this moment, a programmer doesn't need to write boilerplate code for traversals. The identity approach and the pipeline of transformations provide users with a generic transformation like a template.

