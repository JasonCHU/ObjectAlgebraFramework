\section{Contextual Transformations}\label{sec:contexttrans}

The previous section introduced a simple template for defining
transformations. Transformations in this style may only depend on
global context information (e.g., \lstinline{x()}, \lstinline{e()}).
Many transformations, however, require context information that might
change during the traversal itself. In this section we instantiate
algebras over function types to obtain transformations which pass
information down during traversal. Instead of having the algebra
methods delegate directly to base algebra (e.g.,
\lstinline{expAlg()}), this now happens indirectly through closures
that propagate the context information.

Figure~\ref{ctxTrafoTemplate} shows the general template for an \lstinline{Alg<X1, X2, ..., Xn>}, with constructors \lstinline{f1, ..., fm}.
Note that interface \lstinline{Alg}$_{CT}$ extends \lstinline{Alg} and instantiates the type parameters to \lstinline{Function}s from the context argument \lstinline{C} to the corresponding sort \lstinline{X}$_i$.
Each constructor method now creates an anonymous function which, when invoked, calls the functions received as parameters (\lstinline{p}$_1$ to \lstinline{p}$_k$) and only then creates a structure over the \lstinline{alg()} algebra.

\begin{figure}[t]
\nocaptionrule
\begin{lstlisting}[mathescape=true]
interface Alg$_{CT}$<C,X$_1$,$...$,X$_n$>
    extends Alg<Function<C,X$_1$>,$...$,Function<C,X$_n$>> {
  Alg<X$_1$, ..., X$_n$> alg();

  default Function<C, X$_i$> f$_j$(Function<C,X$^1_p$> p$_1$, $...$, Function<C,X$^k_p$> p$_k$) {
    return (c) -> alg().f$_j$(p$_1$.apply(c), $...$, p$_k$.apply(c));
  }
  $...$
}
\end{lstlisting}
\caption{Generic template for generating boilerplate of contextual transformations.}
\label{ctxTrafoTemplate}
\end{figure}

\subsection{Example: conversion to De Bruijn indices}\label{subsec:debruign_example}

%The template shown in Figure~\ref{ctxTrafoTemplate} supports tranformations where traversal dependent context informations flows down the created structure.
An example of a contextual transformation is converting variables to De Bruijn indices in the lambda calculus~\cite{deBruijn1972381}.
Using De Bruijn indices, a variable occurrence is identified by a natural number equal to the number of lambda terms between the variable occurrence and its binding lambda term.
Lambda terms expressed using De Bruijn indices are useful because they are invariant with respect to alpha conversion.

The conversion to De Bruijn indices uses an object algebra interface
\lstinline{LamAlg} with constructors for lambda abstraction
(\lstinline{Lam}) and application (\lstinline{Apply}). See below:

\lstinputlisting[linerange=6-10]{../ObjectAlgebras/src/trees/LamAlg.java} % APPLY:linerange=LAM_TREE

\name automatically generates traversal code for transformation for both
\lstinline{LamAlg} and \lstinline{ExpAlg}:
\lstinline{G_LamAlgTransform} and \lstinline{G_ExpAlgTransform},
respectively. 
The generated transformation code  can be found
in Appendix~\ref{subsec:appendix_code_g_explam_transform}. Using these
interfaces, the conversion to De Bruijn indices is
  realized as shown in Figure~\ref{DeBruijn}. Note again that only the
  relevant cases are overridden: \lstinline{Var} (from
  \lstinline{ExpAlg}) and \lstinline{Lam} (from \lstinline{LamAlg}).


\begin{figure}[t]
\nocaptionrule
\lstinputlisting[linerange=12-24]{../ObjectAlgebras/src/debruijn/DeBruijn.java} % APPLY:linerange=DEBRUIJN
\caption{Converting variables to De Bruijn indices.}
\label{DeBruijn}
\end{figure}

\paragraph{Client code} A structure using the generic interfaces
\lstinline{ExpAlg} and \lstinline{LamAlg} is created as follows:

\lstinputlisting[linerange=68-72]{../ObjectAlgebras/src/debruijn/TestDeBruijn.java} % APPLY:linerange=MAKE_LAM_EXP

\noindent It simply generates ``$\lambda x.\lambda y.~x+y$'' as a generic lambda expression.
By instantiating the \lstinline{DeBruijn} interface with a
\lstinline{Printer} algebra (shown in Appendix~\ref{subsec:appendix_printer}) passed
in as the base algebra, we can write the client code as follows:

\lstinputlisting[linerange=56-62]{../ObjectAlgebras/src/debruijn/TestDeBruijn.java} % APPLY:linerange=CLIENTCODE_DEBRUIJN

\noindent The printed output is ``\lstinline{\.\.(2 + 1)}'', which corresponds to original lambda term, but without variables. 
