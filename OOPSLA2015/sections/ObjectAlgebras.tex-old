\section{Object Algebras}\label{subsec:ObjectAlgebras}

Object Algebras capture a design pattern to solve the Expression Problem~\cite{wadler98expression-problem}.
As a result Object Algebras support modular and type-safe extensibility in two dimensions:
data variants and operations. Object Algebras can be used conveniently model recursive data types, such as ASTs. Here we briefly introduce Object Algebras using the example of a simple expression language. 

\begin{figure}[t]
\nocaptionrule
\lstinputlisting[linerange=4-7]{../ObjectAlgebras/src/example_object_algebras/ObjectAlgebras.java} % APPLY:linerange=INT_ALG_INTERFACE
\caption{A simple expression language}
\label{int_alg_interface}
\end{figure}

Fig.~\ref{int_alg_interface} shows an \emph{Object Algebra interface} which models \lstinline{lit} and \lstinline{add} expressions of \lstinline{ExpAlg}. The interface resembles abstract factory interface, but it instead of constructing objects of a concrete type, the result is abstract through the type parameter \lstinline{E}.
A concrete Object Algebra will implement such an interface instantiate the type parameter to construct objects for a particular purpose.

\begin{figure}[t]
\nocaptionrule
\lstinputlisting[linerange=27-34]{../ObjectAlgebras/src/example_object_algebras/ObjectAlgebras.java} % APPLY:linerange=EXP_FACTORY
\caption{Evaluating expressions}
\label{exp_factory}
\end{figure}

\begin{figure}[t]
\nocaptionrule
\lstinputlisting[linerange=38-45]{../ObjectAlgebras/src/example_object_algebras/ObjectAlgebras.java} % APPLY:linerange=INT_PRINT
\caption{Printing expressions}
\label{int_print_factory}
\end{figure}

For instance, Figure~\ref{exp_factory} shows a class implementing evaluation of expression.
Using this algebra to create expression in fact immediately evaluates the expression to its result.
To add another operation the interface is simply implemented again. As an example Figure~\ref{int_print_factory} shows the a simple printing operation on expressions.
Both examples illustrate extension in the dimension of operations.

%% \begin{figure}[t]
%% \nocaptionrule
%% \lstinputlisting[linerange=51-61]{../ObjectAlgebras/src/example_object_algebras/ObjectAlgebras.java} % APPLY:linerange=OA_TEST_CODE
%% \caption{Object Algebra Test Code}
%% \label{oa_test_code}
%% \end{figure}

\begin{figure}[t]
\nocaptionrule
\lstinputlisting[linerange=11-13]{../ObjectAlgebras/src/example_object_algebras/ObjectAlgebras.java} % APPLY:linerange=INT_BOOL_ALG_INTERFACE
\caption{Extending the language of expressions with multiplication}
\label{int_bool_alg_interface}
\end{figure}


\begin{figure}[t]
\nocaptionrule
\lstinputlisting[linerange=17-22]{../ObjectAlgebras/src/example_object_algebras/ObjectAlgebras.java} % APPLY:linerange=MUL_EVAL
\caption{Extending expression evaluation to support multiplication}
\label{mul_eval}
\end{figure}


The other dimension of extensibility (adding data variants) is  realized by extending the object algebra interface itself. Figure~\ref{int_bool_alg_interface} extends the original \lstinline{ExpAlg} with multiplication expressions.
The key feature of Object Algebras is that the existing operations (evaluation and printing) can now be extended to support multiplication without having to change the existing \lstinline{Eval} and \lstinline{Print} classes. Figure~\ref{mul_eval} shows how this is realized for evaluation. 

In summary, Object Algebra interfaces  describe recursive data types, and implementations of those interfaces represent operations. Extending the interface allows developers to extend the data type with new data variants, and (re)implementing the interface allows developers to define operations.
Finally, extension in both dimensions is fully type safe and does not compromise separate compilation.
%What makes \emph{object algebras} a useful design pattern even more is that it does not rely on any advanced language features, and it is both extensible and type-safe.


\begin{comment}

This paper showed how various types of traversals for complex
structures can be automatically provided by \Name. \name traversals are
written directly in Java and are type-safe, extensible and separately
compilable. There has always been a tension between the
correctness guarantees of static typing, and the flexibility of
untyped/dynamically-typed approaches. \name shows that even
in type systems like Java's, it is possible to get considerable
flexibility and adaptability for the problem of boilerplate code in
traversals of complex structures, without giving up modular static typing.
%\name offers the best of both worlds: the
%static typing guarantees; and flexibility and adaptability.

There are many of avenues for future work. One area of research is to
extend \name traversals to support flexible traversal strategies,
similarly to strategic
programming~\cite{borovansky1996elan,visser1998core,vandenBrand:2003:TRT:941566.941568}. Another
line of work worth exploring is to adopt generalizations of object
algebras~\cite{oliveira13fop} for added expressiveness of \name
traversals.

\end{comment}
