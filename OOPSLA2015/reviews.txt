===========================================================================
                          ECOOP 2015 Review #61A
                     Updated 4 Jan 2015 8:42:08am EST
---------------------------------------------------------------------------
          Paper #61: Scrap your Boilerplate with Object Algebras
---------------------------------------------------------------------------

                      Overall merit: 3. Weak accept
                 Reviewer expertise: 4. Expert

                         ===== Paper summary =====

> Object algebras are a recently introduced way to handle the expression problem.
> However, object algebras on their own do not provide a way to perform multiple similar operation by reusing the common code.
> Here a design pattern building over object algebras and allowing 
> to inherit from such common code is presented; together with Shy:  a framework generating specific kinds of this design pattern allowing to reuse the code without writing it down in the first place.

                      ===== Comments for author =====

> As a programming language designer and implementer I had to rely so many times on complex AST manipulations.
> In my case the language is usually fixed, and I have started my project(s) before object algebras even existed, so I use the visitor pattern. The main advantage of Visitors with respect to Object algebras was, in my opinion during a discussion with Cook,
> that is easy/customary to define some base visitors representing standard kinds of visits and then specialize them.
> For example the "CloneVisitor" is the same concept of the "transformation" and can be used in basically all the ways described in the paper.
> Of course, the CloneVisitor have the limitations of the visitors instead of the advantages of the Object algebras.
> 
> At the light of this, this paper should underline more the value of their proposed programming pattern, try to generalize it, and show the generated code(s) (4 kinds, right) as specialized version of this idea. This is the important bit, the logic underpinning of those visits, that can be general enough that an user can extend them in so many different way to turn them in most of all the algorithms he/she will ever need while working with ASTs. 
> 
> Then is important to compare it with the conventional way Visitors are used in practice as I mentioned before.
> 
> Another fundamental point that is left half in the dark is Section 7, that should be expanded and explained much more.
> 
> For the code generation part, Is interesting, and is worth explaining it, also you many underlined that many design patterns can not easily be structured well enough to be suited for metaprogramming generation, so you have a good edge here.
> When you mention that the code is generated and that you use the annotation processing, you want to mention the Compilation agents (if that is what you use) and how Jars with manifests can automatically inject them into the compilation process. This is still not so widely known in the community that you can expect us to "guess it".
> 
> To conclude: I love your ideas, but the current discussion/presentation organization do not give them the value they deserve.
> Moreover, in many points you sort of suggest that the only alternative to your work is to write manually the code for all the operation without attempting to use some sort of inheritance between operations as is common with visitors.
> ---
> Minor comments:

> code on pg 4:
> -not even a Java master can guess that you are not showing a 
> static import to Collectors.toList()

Static imports added.

> -this.depts=depts is a terrible idea, in the super duper extensible setting you try to place yourself.
> Defensive cloning would be needed. I know, Java is a horrible language with horrible libraries but that is what we have.

Fixed.

> -s,x please call them salary and dep
> Class Salary have a "Float" but later OneOhOneAlg have a corresponding constructor taking "float".
> None of those two options make sense for a money stuff, please use BigInteger.
> 
> -What is the meaning of the name OneOhOne? is not explained anywhere...
> 
> Code in page 6 is Weird: C returns Fload and S return Salary... should it be C and S, right? since your article is on complex and novel code patterns, your code must be perfect otherwise you get misunderstood for sure.
> 
> Code of pg 7: OneOhOneAlgQuery:
> No, no no! you should not generate a class at the same level of the user class OneOhOneAlg, otherwise you are polluting its own namespace. Java support nested classes and you can generate 
> "OneOhOneAlg.Query" and make everyone happier and safer.
> 
> I see that method m is lowercase while the other algebra method are uppercase by convention so they can not clash, this is a good idea and you may mention it.

> 
> Pg 10: all arguments are combined
> This is false, how you deal with non algebraic types, like float before or better as the Lam that you show, that have both a string and a Term?

Fixed.

> 
> pg11: the argument in assign is ignored
> This looks like an horrible idea, why do not leave that method abstract?
> 
> pg 12 section 5
> all the terminology here is sort of messed up when embedded in a non functional language like Java.
> "code that actually change the structure" means something very different in java or in Haskell.
> 
> pg 15
> Please, call Lam  Lambda
> I have no Idea what G_ExpAlg is...
> 
> pg 19: the vanilla query implementation [is forced to] use the same monoid structure as in shy (for fairness)
> Please, look at 
> http://4.bp.blogspot.com/-SwE2n7GGfcY/TcKv0AXBcbI/AAAAAAAAAHQ/OJsurB4FWSM/s400/Fair+test.JPG
> and then change your mind.
> 
> Pg 23: our work show that object algebras are... a different problem.
> No, sorry I strongly disagree with the sentence!
> I do not even think it said what you wanted it to say.
> The only think you show is that there is a (family of?) pattern that allows .... and that nicely build on top of object algebras.

===========================================================================
                          ECOOP 2015 Review #61B
                     Updated 9 Feb 2015 11:54:12am EST
---------------------------------------------------------------------------
          Paper #61: Scrap your Boilerplate with Object Algebras
---------------------------------------------------------------------------

                      Overall merit: 1. Reject
                 Reviewer expertise: 3. Knowledgeable

                         ===== Paper summary =====

> Based on the observation that traversing object graphs often requires significant amounts of boilerplate code, a generic extension of such traversals, based on object algebras, is suggested. An implementation in Java 8 is presented, and its utility is demonstrated by applying it to the implementation of a domain-specific language.

                      ===== Comments for author =====

> I spent long hours with this paper, read it several times, implemented the example in plain Java 8 (see below), re-read the CFP, etc. Unfortunately, despite all this effort, I wasn¡¯t able to see the merit of this work (at least not outside a community that is determined to solve the EP at any price). Instead, I found that
> 
> 1.	it lacks a convincing motivation (the example is remarkably non-object-oriented); 
> 
> 2.	the proposed approach appears to break with central object-oriented principles (such as responsibility and collaboration, representation encapsulation, open closed principle) without offering a significant gain; and
> 
> 3.	it lacks comparison with related work that is applicable to one half of the example (at least).
> 
> Regarding 1:
> 
> In object-oriented programming, objects are usually linked using associations, not compositions (i.e., there is no existential dependency of the part objects on the whole object; note that composition is typically implemented using value, rather than reference, semantics, if the language permits this; in the given example, Employee.salary would typically be implemented this way, yet Java does not permit it).  However, the example in Fig. 1 uses composition throughout. Why? Because the approach can only handle tree structures? Would it still work if an employee was assigned to two departments?  How prevalent are trees in (general) object-oriented programming?
> 
> Implementing the example shows that it actually has very little boilerplate code (see my implementation below). In particular, it is not true that ¡°only the Salary class does some interesting work. All other classes simply delegate the task to the child nodes.¡±: Employee does not delegate to Person, and that it does not do this is just as ¡°boilerplate¡± (or, rather, ¡°non-boilerplate¡±) as the fact that it does delegate to Salary. Similarly, Department does not only delegate to its units and manager, it also sums up the results. Last but not least, it is not uncommon in the Composite pattern that the Leaf (here: Employee) uses a non-boilerplate forwarding (if any), as in my implementation below. Given this, I don¡¯t think it is a good idea to have all the ellipses in the example ¡ª my feeling is that the authors brush over too many relevant questions.
> 
> The increaseSalary() transformation is particularly confusing. Object-oriented programming is commonly stateful, and increasing salary does not create new (immutable?) objects, not even salary objects, but instead changes the state (of salary objects). What the authors seem to suggest here is that a functional design (using values only) is more adequate. However, I fail to see why this should be the case. Instead, I am led to suspect that this odd coding is required to show the merits of their proposed approach. Is it not possible to code updates or commands (in most object-oriented programs complementing queries) using object algebras?
> 
> Last but not least, the fact that the authors switch very quickly to a different example (AST-related and hence tree-based) suggests that the solution does indeed not generalize well to other domains (including the one they used for motivation). What would the monoids required for the motivating example look like?
> 
> Regarding 2:
> 
> From an object-oriented design perspective: Why would I source out queries and transformations to object algebras that resemble case analyses on the type of an object (code which, by the way, calls for immediate application of the Replace Conditional with Polymorphism refactoring, essentially reverting to the original code)? Why expose the List representations to clients in the constructors? In object-oriented programming, this is known to create aliases to representation objects, which is thought to be bad practice (see comments in my code below). I know that a compiler is a program that does not have to care much about data encapsulation and other object-oriented principles (and that indeed these principles get in the way of how compiler writers would want to design their compilers), but I would suspect that compilers (as kinds of programs) are pretty special in this regard, justifying the creation of a DSL rather than the suggestion of a design pattern that breaks basic pr
>  inciples of the host language¡¯s paradigm. 
> 
> The entries for Unit, PU and DU, in the OneOhOne algebra of Figure 3 require some explanation. Why is there a dependency on a subtype (or where am I wrong)? If there is, this is also grossly non object-oriented: How can I extend a system with a new subtype without having to adjust existing code?
> 
> Regarding 3: 
> 
> For instance, Comega [1] implemented (or at least promised to implement) transitive member access in a type-safe manner. Applied to the given example, the Comega expression 
> 
> c1¡­.Salary¡Ësalary
> 
> would evaluate to a (flat) stream of all salaries reachable from the company c1, which can then be summed up. Similarly, increasing salary across all units and their managers could be achieved by an apply-to-all block, as in 
> 
> c1¡­.Employee¡Ësalary.{it.increase();}
> 
> (here, increase() is a method of Salary as shown below, and it is the implicitly declared iteration variable of apply-to-all blocks, representing each object in the stream to which the block is to be applied). Note how the design of Comega has been inspired by how XML structures are traversed and queried using XPath/XQuery; I would suspect that transformation languages can similarly serve as inspiration for type-safe extensions of object-oriented languages.
> 
> Also, extension methods [2] (as available in C# since the version 3.0) are never discussed.  
> 
> 
> As the authors may guess from these questions and comments, I am not convinced. To help me better appreciate their work, I would like the authors to include in their response their complete implementation of the example using object algebras, ideally with some comments addressing the specific advantages. (The authors may also change my implementation wherever they think it is inadequate, or only unsuited to demonstrate the strengths of their approach; this includes reverting to immutable objects.)
> 
> Some minor questions/comments:
> 
> * Figure 2: Why are you using ternary reduce in the example? toList() lacks a receiver (or static import).
> 
> * Page 6, middle, class IncreaseSalary: Shouldn¡¯t the return type of C be Company rather than Float? Looks like the object algebras are the next boilerplate (if they are created using copy and paste ;).
> 
> * Why does the class IncreaseSalary not instantiate the parameters of OneOhOneAlg? 
> 
> 
> [1] Gavin M. Bierman, Erik Meijer, Wolfram Schulte: The Essence of Data Access in Comega. ECOOP 2005: 287-311
> [2] Gavin M. Bierman, Erik Meijer, Mads Torgersen: Lost in translation: formalizing proposed extensions to C#. OOPSLA 2007: 479-498
> 
> 
> Appendix: my implementation

class Company {
	// make alias-free representation
	private List<Department> depts = new ArrayList<>();

	Company(List<Department> depts) {
		// keep representation alias-free
		this.depts.addAll(depts);
	}

	Double salaryBill() {
		// makes computation explicit, hiding representation
		return depts.stream().collect(Collectors.summingDouble(Department::salaryBill));
	}

	void increaseSalary() {
		// keeps representation secret
		depts.stream().forEach(Department::increaseSalary);
	}

	static Company makeCompany() {// omitting names 
		Employee ralf = new Employee(new Person(), 8000.0d);
		Employee joost = new Employee(new Person(), 1000.0d);
		Employee simon = new Employee(new Person(), 2000.0d);
		Employee blair = new Employee(new Person(), 100000.0d);
		List<Unit> us = Arrays.asList(joost, simon);
		List<Department> ds = Arrays.asList(new Department(ralf, us),
		new Department(blair, Arrays.asList()));
		return new Company(ds);
	}
	
	public static void main(String... args) {
		Company c1 = makeCompany();
		System.out.println(c1.salaryBill());
		c1.increaseSalary();
		System.out.println(c1.salaryBill());
	}
}

abstract class Unit {
	abstract Double salaryBill();
	abstract void increaseSalary();
}

class Department extends Unit {
	private Employee manager;
	private List<Unit> units = new ArrayList<>();

	Department(Employee manager, List<Unit> units) {
		this.manager = manager;
		// keep representation alias-free
		this.units.addAll(units);
	}

	@Override Double salaryBill() {
		// explicit about formula
		return units.stream().collect(Collectors.summingDouble(Unit::salaryBill))
				+ manager.getSalary();
	}

	void increaseSalary() {
		// explicit about who receives increase
		manager.increaseSalary();
		units.stream().forEach(Unit::increaseSalary);
	}
}


class Employee extends Unit {
	private Person person;
	private Salary salary;
	
	Employee(Person person, Double salary) {
		this.person = person;
		this.salary = new Salary(salary);
	}

	//no boilerplate; does not expose representation of salary to clients
	Double getSalary() {
		return salary.getValue();
	}

	//no boilerplate
	@Override Double salaryBill() {
		return getSalary();
	}

	void increaseSalary() {
		// forwarding and translation
		salary.increase();
	}
}

class Person {}

class Salary {
	private Double value; // calling it salary suggests a design flaw

	Salary(Double value) {
		this.value = value;
	}

	//saved, e.g., using properties in C#
	Double getValue() {
		return value;
	}

	//saved, e.g., using properties in C#
	void setValue(Double value) {
		this.value = value;
	}

	// renamed; increaseSalary was tautological
	void increase() {
		value *= 1.1d;
	}
}

===========================================================================
                          ECOOP 2015 Review #61C
                     Updated 18 Jan 2015 1:46:43pm EST
---------------------------------------------------------------------------
          Paper #61: Scrap your Boilerplate with Object Algebras
---------------------------------------------------------------------------

                      Overall merit: 3. Weak accept
                 Reviewer expertise: 2. Some familiarity

                         ===== Paper summary =====

> The paper presents an approach to reduce the amount of boilerplate code needed to traverse data structures, typically for queries and local transformations. The proposed approach combines object algebras with design patterns for generic traversal. The approach is implemented as a Java framework using annotations to produce the generic traverals and local overriding for non-standard cases. The paper is well-written and features a case study to evaluate the approach.

                      ===== Comments for author =====

> Evaluation
> 
> Pros.
> + The proposed design patterns seem fairly natural for object algebras
> + Integration in Java
> + Case study + comparison with standard approach (given existing implementation using object algebras)
> 
> Cons.
> - The contribution's novelty is perhaps a bit limited?
> - The example code is sometimes hard to understand
> 
> Overall, I liked this paper but I believe the presentation needs  improvements to clarify implicit parts of the examples.
> 
> Detailed comments.
> - Whereas I agree that writing standard boilerplate code can be tedious, the claim that it is error-prone should perhaps be substantiated. Do you believe your approach is less error-prone?
> 
> - The main contributions of the proposed paper seems to lie in taking results from the functional world (e.g., [14]) and applying them to object algebras in Java. It would have been interesting to learn more about the challenges involved in the implementation (if any - Sec. 8 is very short!).
> 
> - I found the use of the framework in the paper a bit too implicit, which could be a problem for, e.g., code maintenance. The use of monoids could be better explained. For example, in Fig. 2 it is easy to see from the code that the salaryBill sums up the values from depts. However, in Fig. 4, this is much less clear as it depends on the implementation of join() in FloatMonoid (which you don't show). Similarly for, e.g., ExpAlgQuery you say that empty() "corresponds to" EmptySet whereas join() "is implemented" as union. Again, since you don't show the implementation of SetMonoid, this is at best implicit. As a consequence, the implementation of FreeVars is indeed concise _if_ one remembers that ExpAlgQuery inherits from an interface with the @Algebra annotation and one has the operational understanding of both the (right) monoid and the generated traversal code, but otherwise it contains little information and one needs to look in many other places to find the information requ
>  ired to understand the code.
> 
> - Sec 4.1. You could show the overridden method for Assign in G_StatAlgQuery, to make the required redefinition explicit in the paper.
> 
> - To use DepGraph, I believe you would first need to convert Exp to Set<String>? Where do you do that? Does this generate boilerplate code in your context?

> 
> - Bottom of page 12, you say "the result of exp()". I believe this should be "the result of e()"?

Fixed.

> 
> - Sec 6.1. In my opinion, you leave too much of the code implicit here, which makes it hard to follow the example.
> - Fig. 17: What is "xs" here? Where is xs defined?

===========================================================================
                          ECOOP 2015 Review #61D
                     Updated 30 Jan 2015 1:45:20pm EST
---------------------------------------------------------------------------
          Paper #61: Scrap your Boilerplate with Object Algebras
---------------------------------------------------------------------------

                      Overall merit: 5. Strong accept
                 Reviewer expertise: 3. Knowledgeable

                         ===== Paper summary =====

> This paper describes a framework, called Shy, which supports common object traversals in a type-safe, modular, extensible, and succinct way. Often, programs need to traverse a structure (e.g., a tree) to access the desired data, and do some computation over the data. A problem that this paper focuses on is the boilerplate code associated with traversing these structures. Through object algebras, code generation and monoids, Shy frees the programmer from writing boilerplate object traversal code. Shy requires that the programmer collects the signatures of the constructors of the object graph in a Java interface and annotate the interface as an algebra interface. Then, the Shy annotation processor generates query and transformation interfaces for the algebra interfaces. The generated interfaces provide default means of traversing the object graph for common queries and transformations. The programmer then has to only provide a monoid and implement the necessary methods. The mon
>  oid describes how to accumulate the results during the traversal of the object graph. The evaluation shows the applicability of Shy to querying and transforming the programs written in a domain-specific language for creating questionnaires. In addition, the paper compares the performance of Shy with the traditional AST construction.

                      ===== Comments for author =====

> strengths
> 
> The paper provides an elegant solution to a problem that leads to boilerplate code. The solution is modular, extensible, and type-safe. In addition, its use of generics is light-weight.
> 
> Shy is implemented as a standard Java library, which leverages Java's annotation processing mechanism for code generation. Although Shy programming idioms are new to mainstream Java programmers, its basis on standard Java library mechanisms makes Shy easy to implement, integrate in existing environments and use.
> 
> The ideas embodied in Shy have the potential to influence how Java programmers think about object traversal.
> 
> weaknesses
> 
> The paper doesn't clearly characterize the kind of programs that can and cannot be written in Shy. For example, can any piece of Java code that uses the visitor pattern be rewritten in the Shy framework?
> 
> The paper abbreviates and removes parts of the examples. These cuts make the paper harder to understand. For example, the code generated by Shy for the company exmaple (i.e., OneOhOneAlgQuery and OneOhOneAlgTrans) are missing. As another example, same (conflicting) names are used to to refer to type parameters and method names in the code snippets on pages 6 and 7.
> 
> p. 3)  "Our results show that for a large number of traversals there was a significant reduction in the amount of user-defined code."
> The above sentence is not specific about the statistics.
> 
> others

> 
> abstract) employeed -> employed
> abstract) questionaire -> questionnaire
> p. 20) Shy is Java library. -> Shy is a Java library.
> p. 22) Syb -> SyB
> p. 23)  There are many of avenues for future work. ->  There are many avenues for future work.
> p. 15)  Shy queries and transformation ->  Shy queries and transformations

Fixed.

===========================================================================
                          ECOOP 2015 Review #61E
                     Updated 1 Feb 2015 9:41:28am EST
---------------------------------------------------------------------------
          Paper #61: Scrap your Boilerplate with Object Algebras
---------------------------------------------------------------------------

                      Overall merit: 3. Weak accept
                 Reviewer expertise: 3. Knowledgeable

                         ===== Paper summary =====

> This paper presents the Java framework Shy that facilitates traversal of
> tree data structures by eliminating the boilerplate code. Data structures
> in Shy are represented by Object Algebras (OA), a particular sort of
> Abstract Factory, an interface, where each node type is a generic type
> parameter and each node constructor is a method declaration. Shy is
> actually a collection of templates for code generation; it generates for an
> annotated OA several implementations representing common traversal
> algorithms, like query or transformation. These implementations contain the
> default boilerplate code for all node types. The programmer then has to
> extend the generated class and only override a few methods, where the
> desired implementation should differ from the default (generated) one. Shy
> is applied in a case study - a number of queries over a DSL language for
> questionnaires.

                      ===== Comments for author =====

>   Merits:
>   
> The paper is clearly written, motivation is compelling, related work
> rock-solid. It is an interesting illustration of ideas from functional
> programming in an OOP setting.
> 
>   Criticism:
> However I have some concerns about applicability of Shy, and OA in general,
> in the traditional imperative programming. Just like in the original OA
> paper, the target tree data structure is never present in the memory. It is
> constructed and consumed on the fly, in each operation (traversal)
> performed over the tree. Only one compositional pattern is illustrated in
> the paper - the composition of several traversal algorithms. It does not
> look possible to produce the tree, apply one transformation over it, store
> the result, then at some later time apply another transformation.
> 
> Moreover, it is possible to design a simpler API that eliminates the
> boilerplate of tree traversal while eliminating the above limitations. All
> you need is a base class for all nodes, that contains a method
> getChildren(). Then tree traversal for uninteresting nodes have to be
> implemented just once - for the base node class. This approach is used at
> least in Intellj Idea, to my knowledge.
> 
>   Questions:
> - p.6,class SalaryBill. It is not clear from the code how the class should
> be used, given an existing Company object. Could you provide a fragment of
> the client code?
> 
> - p.6, class IncreaseSalary. What is the role of the alg object? It cannot
> be the factory Object Algebra, because if you call alg.C(...) on the
> factory, it will simply clone the whole tree without changes. Field alg
> needs a reference to "this" somewhere to be able to call S() from this.
> 
> - Sec 3.2. Is there any reason why a custom Monoid class was used, instead
> of the standard solution used by Stream.reduce() methods from Java 8?
> 
> - p 19. "In case of Shy constructing the AST corresponds to executing the
> query." Do you mean Shy transformations actually parse the QL program?
> Could describe how parsing is performed?


===========================================================================
           Response by Bruno C. d. S. Oliveira <bruno@cs.hku.hk>
          Paper #61: Scrap your Boilerplate with Object Algebras
---------------------------------------------------------------------------
We would like to thank the reviewers for their extensive comments on our paper. 

Below we would like to take the opportunity to clarify the main 

issues raised by the reviewers. 



* Non-OO style, applicability and generality (reviewers 2, 4 and 5)



We agree that the paper is not very clear about the

applications domains and generality of the approach. We will 

make this clear in the revision of the paper. 



Our main motivation is to use Shy for doing traversals over large

ASTs, as suggested in the 1st paragraph of the Introduction. We are

indeed focusing on tree structures and functional style

transformations, which we believe are well suited for doing language

processing. Indeed most applications using object algebras are focused 

on language processing (DSL implementation [11,22], 

general language implementation [27], grammar processing [23]). 



Reviewer 2 strongly objected to the non OOP-style of the 101companies

example. We certainly understand the objection. However, we would like

to remark that this is an example taken from the functional SyB

literature (see reference [14]), represented in Java. As a result:

101companies is strictly a tree structure and transformations never

mutate. We used this example simply because it has become a flagship

example in the area of structure-shy traversals. We will clarify this

in the paper.



* Missing code



Some reviewers complained about missing code, especially about the

code for Monoids. We will include that code in the paper and provide 

a detailed explanation. For reference we include it here too:



class FloatMonoid implements Monoid<Float>{

	public Float join(Float x, Float y){

		return x + y;

	}

	public Float empty(){

		return 0f;

	}

}



public class SetMonoid<X> implements Monoid<Set<X>> {

	public Set<X> join(Set<X> x, Set<X> y) {

		Set<X> tmp = new HashSet<>(x);

		tmp.addAll(y);

		return tmp;

	}



	public Set<X> empty() {

		return Collections.emptySet();

	}

}



## Reviewer 1



Reviewer 1 mentions the common OO idiom of having Visitor base classes

containing default "no-op" traversal methods from which concrete

visitors can inherit and only the relevant cases need then to be

overridden. Indeed this is very similar to how Shy operates, except

for one important difference: ordinary visitors are not extensible in

a type safe way if a new data type variant is added. We will emphasise

this better in the related work section of the paper. We will also 

improve the introduction to discuss the general pattern of having 

a default implementation, and specialising this pattern to get various 

kinds of interesting traversals.



## Reviewer 2



Reviewer 2 presents the strongest criticism of the approach. 



We addressed his two first concerns in our first point above. Moreover, as

requested by the reviewer, we send the full code of the Company

example using Shy attached with comments illustrating the benefits of the

approach. 



Regarding his 3rd point we would like to thank the reviewer for pointing 

us to this line of work. It is clearly related and we will provide a

detailed comparison in related work.



One final remark is that the suggestion that the code calls for "replace

conditional with polymorphism" is incorrect. All case distinctions

happen through method dispatch, so this an "open choice": both

interface and implementation can be extended without the need for

shotgun surgery.



## Reviewer 3



Reviewer 3 ask to substantiate why Shy is less error-prone than writing

standard boilerplate. The reason for this simple: code that

programmers don't write can't have bugs. Assuming the Shy code

generation is correct, this avoids whole classes of bugs that could be

introduced by programmers when writing uninteresting traversal code.



## Reviewer 4



Reviewer 4 is most positive about our work (Strong accept). One

question asks whether all Visitor like code in Java can be rewritten

in the Shy style. This is a difficult question to answer, since there

are quite a few variants of the visitor pattern. What we can say is

that many of the uses of visitors can be modelled with OAs and in Shy.

Object Algebras are known to express all code written with one

specific type of visitors, called internal visitors (see reference

[22]). For Shy in particular, the kinds of visitor related code that

can be expressed is similar to the default visitors mentioned by

reviewer 1.



## Reviewer 5



Reviewer 5 has concerns about the applicability of the Shy, which we 

clarified in the first point above. 



Regarding the simpler API using getChildren(): this is essentially the

same approach as taken in JJTraveler (see reference [31]). We refer to

our related work for a comparison with JJTraveler.





====== EXTRA: CODE&COMMENTS FOR THE COMPANY EXAMPLE (REVIEWER 2) ==============

/* This is the all the code someone would need to write to execute all 

   of our company example. Note that the paper already includes all

   the code, except for the definition of FloatMonoid (that

   definition is actually part of Shy's library, so it does not need

   to be defined).



   The code can also be found in the bundle that we have submitted 

   together with the paper. It is under the ObjectAlgebras project.

   The package is:



   example_Sybalg



   In the bundle, the code is distributed across several files.

*/





// A Shy user should first declare the Object algebra interface with

// an @Algebra annotation. Given this annotation, 

// OneOhOneAlgQuery and OneOhOneAlgTrans (among other things) 

// will be generated.

@Algebra

public interface OneOhOneAlg<Company,Dept,Unit,Employee,Person,Salary> {

  Company C(List<Dept> depts);

  Dept D(String name, Employee manager, List<Unit> units);

  Unit PU(Employee employee);

  Unit DU(Dept dept);

  Employee E(Person p, Salary s);

  Person P(String name, String address);

  Salary S(float salary);

}



// The salary bill and increase salary operations simply inherits

// generic traversal code from

// OneOhOneAlgQuery and OneOhOneAlgTrans respectively.

// (See S3 and S5 for how the code is generated)

//

// The user only needs 4 lines of code to define each operation. 

// ***Even if the Company structure would have 50 different types 

// of nodes, the code would remain the same.*** 

// In contrast with the reviewers approach, if there were 50 different 

// types of nodes, there would be substantially more

// traversal code.

//

// The above is an important point that the reviewer should note. 

// None of the papers dealing 

// with structure-shy traversals actually present examples that 

// are big enough to make the presence of boilerplate really painful. 

// The reason for not presenting such examples is simple: they don¡¯t 

// fit in a conference paper! The company example is agreeably a contrived 

// example that is big enough to show a bit of pain, but small enough to fit

// in a paper.  

//

// We would claim 3 advantages in Shy's approach:

//   1)  Substantially less code in large tree structures;

//   2)  Operations are modular with respect to the data structure (so

//        easier to add new operations)

//   3) Code is more robust to changes: altering the original

//       structure, often does not require changes in the traversal code



class SalaryBill implements OneOhOneAlgQuery<Float> {

	public Monoid<Float> m() {return new FloatMonoid();}

	public Float S(float sal) {return sal;}

}



class IncreaseSalary<C,D,U,E,P,S> extends OneOhOneAlgTrans<C,D,U,E,P,S> {

	IncreaseSalary(OneOhOneAlg<C,D,U,E,P,S> alg) { super(alg); }

	public S S(float salary) { return oneOhOneAlg().S(1.1f * salary); }

}



// For completeness, here is the definition of FloatMonoid. The user

// actually does not need to provide this definition since it is part 

// of Shy's library.

class FloatMonoid implements Monoid<Float>{

	public Float join(Float x, Float y){

		return x + y;

	}

	public Float empty(){

		return 0f;

	}

}



// The following is the client code.

public class Main {

	static <C,D,U,E,P,S> C makeCompany(OneOhOneAlg<C,D,U,E,P,S> alg) {

		E ralf  = alg.E(alg.P("Ralf", "Amsterdam"), alg.S(8000.0f));

		E joost = alg.E(alg.P("Joost", "Amsterdam"), alg.S(1000.0f));

		E simon = alg.E(alg.P("Simon", "Cambridge"), alg.S(2000.0f));

		E blair = alg.E(alg.P("Blair", "London"), alg.S(100000.0f));

		List<U> us = asList(alg.PU(joost), alg.PU(simon));

		List<D> ds = asList(alg.D("Research", ralf, us), 

	                        alg.D("Strategy", blair, emptyList()));

		return alg.C(ds);

	}

	

	public static void main(String[] args) {

		SalaryBill salaryBill = new SalaryBill();

		System.out.println(makeCompany(salaryBill));

		IncreaseSalary<Float,Float,Float,Float,Float,Float> incSalary 

		  = new IncreaseSalary<>(salaryBill);

		System.out.println(makeCompany(incSalary));

	}

===========================================================================
                                  Comment
          Paper #61: Scrap your Boilerplate with Object Algebras
---------------------------------------------------------------------------
No doubt the authors will be very disappointed by the decision. The following may point to how the paper can be appreciated by a wider (OO) readership:



Do not depend on knowledge of the scrap-your-boilerplate literature. I would even go as far as scraping the example ¡ª at least to me, it was one big counterexample (for OAs being a contribution to OOP, that is). If you can¡¯t think of another application domain than compilers, use compilers.



Make the paper more self-contained for the OA-illiterate. The current paper relies too much on prior knowledge of OAs. Surely, OAs are not a contribution of this paper, and considering how recent their conception is, they are already pretty well-known, but maybe still not well-known enough for this paper. My suggestion would be to dedicate up to one fifth of the paper to contrasting complete implementations of a sample problem using OO and OA, including how the latter deals with subtyping and/or inheritance (I still did not get why the OA of the paper has two methods for Unit, one for each subtype of it). You could then show which part of the OA code can be scrapped by your approach (without ellipses!). Make sure that the remaining code (that needs to be written by the programmer) still needs the type safety offered by OA.



You may take the following questions I posed to my fellow reviewers as hints on how to further improve your paper:



* In a traditional OO implementation, a class Person would not have a salary associated with it. In OA, so it seems, a corresponding query would return 0. If so, this is something very different. 



* Also, considering that the monoids now delivered are defined by the framework, they seem to be rather geared to the specific example: why, e.g., does FloatMonoid implement addition? This is not suggested by its name. (Again, if this question appears silly to you, maybe this expresses that some clarification would help some readers.)



* The argument that OA unfolds its advantage when the examples are large is countered by the argument that an OA with 100 + type parameters is rather unwieldy. Maybe there is a way to generate the OA from some source (e.g., a class diagram)?

===========================================================================
                                  Comment
          Paper #61: Scrap your Boilerplate with Object Algebras
---------------------------------------------------------------------------
This paper generated an extraordinary number of comments.  In the end, it had to be rejected because it was not clearly above average for an ECOOP paper. I hope the authors are not discouraged and will revise and resubmit to ECOOP or elsewhere.  One of the reviewers has written a lengthy message with advice on directions in the revision.
